program = importStmt * unitDef *

importStmt = IMPORT (ID .) * ID
(* 单元定义 *)
unitDef = structDef | funcDef | varDefs

structDef = STRUCT ID { varDef * }

funcDef = funcHead funcBody
funcHead = FUNC funcType ID '(' funcParam? ')'
funcBody = { stmt * }
funcParam = varType ID (, varType ID) *

varDefs = varType varDef (, varDef ) *
varDef = ID ( = expr) ?

varType = baseType | structType ([ expr ]) *
funcType = baseType | VOID
baseType = INT | LONG | CHAR | FLOAT | DOUBLE
structType = ID

stmt = varDefs
     | ifStmt
     | whileStmt
     | forStmt
     | breakStmt
     | continueStmt
     | returnStmt
     | exprStmt
     | compoundStmt

ifStmt = IF '(' expr ')' stmt
         (ELSE IF '(' expr ')' stmt) *
         (ELSE stmt) ?

compoundStmt = { stmt }

(* 表达式解析 *)
expr = assignExpr

(* TODO: assignExpr -> factorExpr OP_ASSIGN assignExpr *)
assignExpr = condExpr OP_ASSIGN assignExpr
           | condExpr

(* 字符串运算的+=特殊处理 *)
OP_ASSIGN = '='
          | '+='
          | '-='
          | '*='
          | '/='
          | '%='
          | '&='
          | '|='
          | '^='
          | '<<='
          | '>>='

condExpr = logicOrExpr '?' assignExpr ':' condExpr
         | logicOrExpr

logicOrExpr = logicOrExpr '||' logicAndExpr
            | logicAndExpr

logicAndExpr = logicAndExpr '&&' bitOrExpr
             | bitOrExpr

bitOrExpr = bitOrExpr
          | bitXorExpr
          | bitXorExpr

bitXorExpr = bitXorExpr '^' bitAndExpr
           | bitAndExpr

bitAndExpr = bitAndExpr '&' equalityExpr
           | equalityExpr

equalityExpr = equalityExpr '==' relationExpr
             | equalityExpr '!=' relationExpr
             | relationExpr

relationExpr = shiftExpr '>' shiftExpr
             | shiftExpr '>=' shiftExpr
             | shiftExpr '<' shiftExpr
             | shiftExpr '<=' shiftExpr
             | shiftExpr

shiftExpr = shiftExpr '<<' addOrSubExpr
          | shiftExpr '>>' addOrSubExpr
          | addOrSubExpr

addOrSubExpr = addOrSubExpr '+' mulOrDivExpr
             | addOrSubExpr '-' mulOrDivExpr
             | mulOrDivExpr

mulOrDivExpr = mulOrDivExpr '*' suffixUnaryExpr
             | mulOrDivExpr '/' suffixUnaryExpr
             | suffixUnaryExpr

suffixUnaryExpr = prefixUnaryExpr '++'
                | prefixUnaryExpr '--'
                | prefixUnaryExpr

prefixUnaryExpr = '~' prefixUnaryExpr
                | '!' prefixUnaryExpr
                | '++' factorExpr
                | '--' factorExpr
                | '-' factorExpr
                | castExpr
                | factorExpr

castExpr = '(' TYPE ')' prefixUnaryExpr

#TODO 从这里开始重写
factorExpr = fieldAccessExpr
           | arrayAccessExpr
           | callFuncExpr
           | primary

fieldAccessExpr = factorExpr '.' ID

arrayAccessExpr = factorExpr '[' expr ']'

callFuncExpr = factorExpr '(' param ')'

(* 不可分割，不可链式操作 *)
primary = ID
        | arrExpr
        | structExpr
        | '(' expr ')'
        | literal

literal = NUM_VAL | STRING_VAL | CHAR_VAL | DOUBLE_VAL | FLOAT_VAL

arrExpr = '[' (expr ',')* ']'
structExpr = '{' (ID ':' expr ',')* '}'